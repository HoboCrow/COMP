_               {printf("RESERVED(%s)",yytext);}abstract        {printf("RESERVED(%s)",yytext);}assert          {printf("RESERVED(%s)",yytext);}boolean         {printf("RESERVED(%s)",yytext);}break           {printf("RESERVED(%s)",yytext);}byte            {printf("RESERVED(%s)",yytext);}case            {printf("RESERVED(%s)",yytext);}catch           {printf("RESERVED(%s)",yytext);}char            {printf("RESERVED(%s)",yytext);}class           {printf("RESERVED(%s)",yytext);}const           {printf("RESERVED(%s)",yytext);}continue        {printf("RESERVED(%s)",yytext);}default         {printf("RESERVED(%s)",yytext);}do              {printf("RESERVED(%s)",yytext);}double          {printf("RESERVED(%s)",yytext);}else            {printf("RESERVED(%s)",yytext);}enum            {printf("RESERVED(%s)",yytext);}extends         {printf("RESERVED(%s)",yytext);}final           {printf("RESERVED(%s)",yytext);}finally         {printf("RESERVED(%s)",yytext);}float           {printf("RESERVED(%s)",yytext);}for             {printf("RESERVED(%s)",yytext);}goto            {printf("RESERVED(%s)",yytext);}if              {printf("RESERVED(%s)",yytext);}implements      {printf("RESERVED(%s)",yytext);}import          {printf("RESERVED(%s)",yytext);}instanceof      {printf("RESERVED(%s)",yytext);}int             {printf("RESERVED(%s)",yytext);}interface       {printf("RESERVED(%s)",yytext);}long            {printf("RESERVED(%s)",yytext);}native          {printf("RESERVED(%s)",yytext);}new             {printf("RESERVED(%s)",yytext);}package         {printf("RESERVED(%s)",yytext);}private         {printf("RESERVED(%s)",yytext);}protected       {printf("RESERVED(%s)",yytext);}public          {printf("RESERVED(%s)",yytext);}return          {printf("RESERVED(%s)",yytext);}short           {printf("RESERVED(%s)",yytext);}static          {printf("RESERVED(%s)",yytext);}strictfp        {printf("RESERVED(%s)",yytext);}super           {printf("RESERVED(%s)",yytext);}switch          {printf("RESERVED(%s)",yytext);}synchronized    {printf("RESERVED(%s)",yytext);}this            {printf("RESERVED(%s)",yytext);}throw           {printf("RESERVED(%s)",yytext);}throws          {printf("RESERVED(%s)",yytext);}transient       {printf("RESERVED(%s)",yytext);}try             {printf("RESERVED(%s)",yytext);}void            {printf("RESERVED(%s)",yytext);}volatile        {printf("RESERVED(%s)",yytext);}while           {printf("RESERVED(%s)",yytext);}